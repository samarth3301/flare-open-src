"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VoteClient = void 0;
const sdk_1 = require("@top-gg/sdk");
const events_1 = require("events");
const VoteWebhookManager_1 = require("./VoteWebhookManager");
class VoteClient extends events_1.EventEmitter {
    _authToken;
    _webhookOptions;
    constructor(options) {
        super();
        this._authToken = options?.token ?? '';
        this._webhookOptions = options?.webhook;
        if (this._webhookOptions) {
            new VoteWebhookManager_1.VoteWebhookManager({
                ...this._webhookOptions,
                client: this,
            }).startWebhookServer();
        }
    }
    setToken(token) {
        this._authToken = token;
        return this;
    }
    setWebhookPath(path) {
        if (!this._webhookOptions) {
            this._webhookOptions = {};
        }
        this._webhookOptions.path = path;
        return this;
    }
    setWebhookPort(port) {
        if (!this._webhookOptions) {
            this._webhookOptions = {};
        }
        this._webhookOptions.port = port;
        return this;
    }
    setWebhookAuthorization(authorization) {
        if (!this._webhookOptions) {
            this._webhookOptions = {};
        }
        this._webhookOptions.authorization = authorization;
        return this;
    }
    hasToken() {
        return !!this._authToken || this._authToken !== '';
    }
    async getVotes() {
        if (!this.hasToken()) {
            throw new Error('[Top.gg Votes] Missing token!');
        }
        return await new sdk_1.Api(this._authToken).getVotes();
    }
    async hasVoted(userId) {
        if (!this.hasToken()) {
            throw new Error('[Top.gg Votes] Missing token!');
        }
        if (!userId)
            throw new Error('[Top.gg Votes] Missing user ID!');
        return await new sdk_1.Api(this._authToken).hasVoted(userId);
    }
    async getBot(botId) {
        if (!this.hasToken()) {
            throw new Error('[Top.gg Votes] Missing token!');
        }
        if (!botId)
            throw new Error('[Top.gg Votes] Missing bot ID!');
        return await new sdk_1.Api(this._authToken).getBot(botId);
    }
    async getUser(userId) {
        if (!this.hasToken()) {
            throw new Error('[Top.gg Votes] Missing token!');
        }
        if (!userId)
            throw new Error('[Top.gg Votes] Missing user ID!');
        return await new sdk_1.Api(this._authToken).getUser(userId);
    }
}
exports.VoteClient = VoteClient;
